[project]
name = "gamm23"
version = "1.0.0"
#description = "???"
readme = "README.md"
requires-python = "~=3.11"
authors = [
    { name = "Alexander Auras", email = "33501357+AlexanderAuras@users.noreply.github.com" },
]
maintainers = []
#keywords = [
#    "framework",
#    "deep learning",
#    "machine learning",
#    "pytorch",
#]
#classifiers = [
#    "Development Status :: 2 - Pre-Alpha",
#    "Intended Audience :: Developers",
#    "Intended Audience :: Science/Research",
#    "Programming Language :: Python :: 3 :: Only",
#    "Topic :: Software Development",
#    "Topic :: Scientific/Engineering :: Artificial Intelligence",
#    "Topic :: Scientific/Engineering :: Image Processing",
#    "Typing :: Typed",
#]
dynamic = ["dependencies"]

[project.urls]
#homepage = "https://github.com/AlexanderAuras/???"
#repository = "https://github.com/AlexanderAuras/???.git"
#changelog = "https://github.com/AlexanderAuras/???/blob/master/CHANGELOG.md"
#documentation = <URL>

[build-system]
requires = ["setuptools~=68.1.2"]

[tool.setuptools.dynamic]
dependencies = { file = "requirements.txt" }

[tool.pyright]
include = ["src"]
exclude = ["**/__pycache__", "**/.egg-info"]
typeCheckingMode = "strict"
useLibraryCodeForTypes = true
analyzeUnannotatedFunctions = true
enableTypeIgnoreComments = true
strictDictionaryInference = true
strictListInference = true
strictParameterNoneValue = true
strictSetInference = true
reportDeprecated = "warning"
reportAssertAlwaysTrue = "warning"
reportCallInDefaultInitializer = "warning"
reportConstantRedefinition = "error"
reportDuplicateImport = "warning"
reportFunctionMemberAccess = "none"
reportGeneralTypeIssues = "error"
reportImplicitStringConcatenation = "warning"
reportImportCycles = "error"
reportIncompatibleMethodOverride = "error"
reportIncompatibleVariableOverride = "error"
reportIncompleteStub = "error"
reportInconsistentConstructor = "error"
reportInvalidStringEscapeSequence = "error"
reportInvalidStubStatement = "error"
reportInvalidTypeVarUse = "error"
reportMatchNotExhaustive = "error"
reportMissingImports = "warning"
reportMissingModuleSource = "information"
reportMissingParameterType = "error"
reportMissingSuperCall = "warning"
reportMissingTypeArgument = "error"
reportMissingTypeStubs = "information"
reportOptionalCall = "error"
reportOptionalContextManager = "error"
reportOptionalIterable = "error"
reportOptionalMemberAccess = "error"
reportOptionalOperand = "error"
reportOptionalSubscript = "error"
reportOverlappingOverload = "error"
reportPrivateImportUsage = "warning"
reportPrivateUsage = "warning"
reportPropertyTypeMismatch = "error"
reportSelfClsParameterName = "error"
reportShadowedImports = "warning"
reportTypeCommentUsage = "error"
reportTypedDictNotRequiredAccess = "error"
reportUnboundVariable = "error"
reportUndefinedVariable = "error"
reportUninitializedInstanceVariable = "error"
reportUnknownArgumentType = "information"
reportUnknownLambdaType = "information"
reportUnknownMemberType = "information"
reportUnknownParameterType = "information"
reportUnknownVariableType = "information"
reportUnnecessaryCast = "warning"
reportUnnecessaryComparison = "warning"
reportUnnecessaryContains = "warning"
reportUnnecessaryIsInstance = "warning"
reportUnnecessaryTypeIgnoreComment = "warning"
reportUnsupportedDunderAll = "error"
reportUntypedBaseClass = "information"
reportUntypedClassDecorator = "information"
reportUntypedFunctionDecorator = "information"
reportUntypedNamedTuple = "information"
reportUnusedCallResult = "information"
reportUnusedClass = "information"
reportUnusedCoroutine = "information"
reportUnusedExpression = "warning"
reportUnusedFunction = "information"
reportUnusedImport = "information"
reportUnusedVariable = "warning"
reportWildcardImportFromLibrary = "error"

[tool.black]
line-length = 99999

[tool.isort]
profile = "black"
src_paths = ["src"]
line_length = 99999
lines_after_imports = 2